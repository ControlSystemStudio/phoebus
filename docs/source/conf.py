# -*- coding: utf-8 -*-
#
# Phoebus documentation build configuration file, created by
# sphinx-quickstart on Wed Sep 20 09:34:53 2017.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import xml.etree.ElementTree as ET
from pathlib import Path

from sphinx.util import logging

logger = logging.getLogger(__name__)

# Add the _ext/ directory to the path to find our custom Sphinx extensions.
sys.path.append(str(Path('_ext').resolve()))

# -- General configuration -----------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be extensions
# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = [
    "preferences_listing",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = '.rst'

# The encoding of source files.
#source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'Phoebus'
copyright = '2017-%Y, Phoebus Developers'

def find_phoebus_version() -> str:
    try:
        pom = ET.parse("../../pom.xml")
        version_el = pom.find("./{http://maven.apache.org/POM/4.0.0}version")

        if version_el is not None and version_el.text is not None:
            return version_el.text
        else:
            raise RuntimeError("Couldn't find a valid <version> in pom.xml")
    except Exception:
        logger.exception("Couldn't find Phoebus version, using a default value")
        return "1.0"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
version = find_phoebus_version()
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []


# -- Options for HTML output ---------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
#html_logo = None

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

html_css_files = [
    'api-font.css',
]

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'Phoebusdoc'


# -- Options for LaTeX output --------------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title, author, documentclass [howto/manual]).
latex_documents = [
  ('index', 'Phoebus.tex', u'Phoebus Documentation',
   u'Phoebus Developers', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output --------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'phoebus', u'Phoebus Documentation',
     [u'Phoebus Developers'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output ------------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'Phoebus', u'Phoebus Documentation',
   u'Phoebus Developers', 'Phoebus', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

highlight_language = 'none'



# Create applications.rst, services.rst
# by listing links to all app/**/index.rst

import os
from os import walk, path
from distutils.dir_util import copy_tree

def createDocListing(rst_file, header, roots):
    area = rst_file.replace('.rst', '')
    with open('{}.rst'.format(area), 'w') as out:
        out.write(header)
        # Locate index.rst files (presumably under core/*/doc/index.rst or app/*/doc/index.rst)
        # as well as existing html folders
        out.write("""
.. toctree::
   :maxdepth: 1
   
""")
        for root in roots:
            for (dirpath, dirnames, filenames) in walk(root):
                # Consider only 'original' files, not those
                # that have already been copied to phoebus-product/target/doc
                if "/target/" in dirpath:
                    continue
                if dirpath.endswith("html"):
                    dest = path.join("../build/html/", path.basename(root), path.relpath(dirpath, root))
                    print("Adding static content from: " + dirpath + " to " + dest)
                    # build/html/phoebus/app/display/editor/doc
                    copy_tree(dirpath, dest)
                if dirpath.endswith("doc"):
                    dst = path.join(path.basename(root), path.relpath(dirpath, root))
                    copy_tree(dirpath, dst)
                    for filename in filenames:
                        if filename == 'index.rst':
                            file = path.join(dst, filename.replace(".rst", ""))
                            print("Adding to applications.rst: " + file.replace(os.sep, '/'))
                            out.write("   " + file.replace(os.sep, '/') + "\n")
                    for dirname in dirnames:
                        if dirname.endswith("images"):
                            src = path.join(dirpath,dirname)
                            dst = path.join("../source/images/")
                            if(not os.path.isdir(dst)):
                                os.mkdir(dst)
                            copy_tree(src, dst)

root = '../..'

createDocListing('applications.rst', """Applications
============

The following sections describe details of specific application features.

""", [ path.join(root, "core"), path.join(root, "app") ])

createDocListing('services.rst', """Services
========

The following sections describe available services.

""", [ path.join(root, "services") ])
